import requests
import yfinance as yf
from bs4 import BeautifulSoup
from pymongo import MongoClient

def fetch_sp500_companies():
    url = 'https://en.wikipedia.org/wiki/List_of_S%26P_500_companies'
    response = requests.get(url)
    if response.status_code != 200:
        raise Exception(f"Failed to load page {url}")

    soup = BeautifulSoup(response.content, 'html.parser')
    table = soup.find('table', {'class': 'wikitable sortable'})
    companies = []

    for row in table.findAll('tr')[1:]:
        cells = row.findAll('td')
        ticker = cells[0].text.strip()
        company_name = cells[1].text.strip()
        companies.append((ticker, company_name))
    
    return companies

def fetch_stock_data(ticker):
    # yfinance expects a dash instead of a dot in tickers
    stock = yf.Ticker(ticker.replace('.', '-'))
    
    # Try to fetch daily data first
    hist = stock.history(period="1d")
    if hist.empty:
        # If no daily data, try fetching monthly data
        hist = stock.history(period="1mo")
        if hist.empty:
            return None
    
    # Get the latest stock data
    try:
        data = {
            'Ticker': ticker,
            'Date': hist.index[-1].strftime('%Y-%m-%d'),
            'Open': hist['Open'].iloc[-1],
            'Close': hist['Close'].iloc[-1],
            'High': hist['High'].iloc[-1],
            'Low': hist['Low'].iloc[-1],
            'Market Cap': stock.info.get('marketCap', 'N/A'),
            'Current Price': stock.info.get('currentPrice', 'N/A'),
            'Stock P/E': stock.info.get('trailingPE', 'N/A'),
            'Book Value': stock.info.get('bookValue', 'N/A'),
            'Dividend Yield': stock.info.get('dividendYield', 'N/A'),
            'ROCE': stock.info.get('returnOnEquity', 'N/A'),  # yfinance does not provide ROCE, using ROE as a proxy
            'ROE': stock.info.get('returnOnEquity', 'N/A'),
            'Face Value': stock.info.get('sharesOutstanding', 'N/A')  # yfinance does not provide Face Value directly, using sharesOutstanding as a proxy
        }
        
        # Suggestion based on the close and open prices
        if data['Close'] < data['Open']:
            data['Suggestion'] = "Good time to buy"
        else:
            data['Suggestion'] = "Not a good time to buy"
        
        return data
    
    except KeyError as e:
        print(f"KeyError: {e} for ticker {ticker}")
        return None

def store_data_to_mongodb(data, db_name='stock_data_wikipedia', collection_name='sp500'):
    # Connect to MongoDB
    client = MongoClient('localhost', 27017)  # Adjust the host and port as necessary
    db = client[db_name]
    collection = db[collection_name]
    # Insert the stock data into the collection
    collection.update_one(
        {'Ticker': data['Ticker']},
        {'$set': data},
        upsert=True
    )

def print_all_companies_and_store_stock_data(companies):
    print("All Companies in the S&P 500 with Stock Data:")
    for ticker, company_name in companies:
        print(f"{ticker}: {company_name}")
        stock_data = fetch_stock_data(ticker)
        if stock_data:
            print(f"  Date: {stock_data['Date']}")
            print(f"  Open value: {stock_data['Open']}")
            print(f"  Close value: {stock_data['Close']}")
            print(f"  High value: {stock_data['High']}")
            print(f"  Low value: {stock_data['Low']}")
            print(f"  Market Cap: {stock_data['Market Cap']}")
            print(f"  Current Price: {stock_data['Current Price']}")
            print(f"  Stock P/E: {stock_data['Stock P/E']}")
            print(f"  Book Value: {stock_data['Book Value']}")
            print(f"  Dividend Yield: {stock_data['Dividend Yield']}")
            print(f"  ROCE: {stock_data['ROCE']}")
            print(f"  ROE: {stock_data['ROE']}")
            print(f"  Face Value: {stock_data['Face Value']}")
            print(f"  Suggestion: {stock_data['Suggestion']}")
            store_data_to_mongodb(stock_data)
        else:
            print("  No stock data available")
        print()

if __name__ == "__main__":
    companies = fetch_sp500_companies()
    print_all_companies_and_store_stock_data(companies)
    print(f"\nTotal number of companies: {len(companies)}")
